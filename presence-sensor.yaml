substitutions:
  device_name: esphome_presence_sensor
  friendly_name: "存在传感器"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true

  project:
    name: esphome.presence-sensor
    version: "1.0"
  on_boot:
    priority: 250
    # ...
    then:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(resolution_read).data(),sizeof(id(resolution_read)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_read).data(),sizeof(id(base_para_read)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(movement_sensitivity_read).data(),sizeof(id(movement_sensitivity_read)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(static_sensitivity_read).data(),sizeof(id(static_sensitivity_read)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
# Enable Home Assistant API
api:

ota:
  - platform: esphome

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://xqyang2008/esphome.presence-sensor/presence-sensor.yaml@main
  import_full_config: false # or true

wifi:
  # Set up a wifi access point
  ap:
    ssid: "Presence-Sensor Fallback Hotspot"
    password: "12345678"
  on_connect:
    - switch.turn_off: ${device_name}_led
  on_disconnect:
    - delay: 0.5s
    - switch.toggle: ${device_name}_led

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

web_server:
  port: 80

button:
  - platform: restart
    name: ${device_name}_reboot
  - platform: template
    name: "Calibration Radar"
    id: ${device_name}_radar_calibration 
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(radar_calibration).data(),sizeof(id(radar_calibration)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"
  - platform: template
    name: "Read Calibration Status"
    id: ${device_name}_cal_state_read
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(cal_state_read).data(),sizeof(id(cal_state_read)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"
  - platform: template
    name: "Reset Radar"
    id: ${device_name}_radar_reset
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(radar_reset).data(),sizeof(id(radar_reset)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"
  - platform: template
    name: "Restart Radar"
    id: ${device_name}_radar_restart
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(radar_restart).data(),sizeof(id(radar_restart)));"
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"
  - platform: template
    name: "Config Begin"
    id: ${device_name}_config_set_begin
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));"
  - platform: template
    name: "Config End"
    id: ${device_name}_config_set_end
    on_press:
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"

time:
  - platform: sntp
    id: ${device_name}_time

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name}_ip
    mac_address:
      name: ${device_name}_mac
  - platform: template
    name: "Radar Calibration Status"
    id: ${device_name}_cal_status
    update_interval: never
  - platform: template
    name: "Target Status"
    id: ${device_name}_target_status
    update_interval: never

globals:
  - id: config_set_begin
    type: std::array<uint8_t, 14>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x04,0x00,0xFF,0x00,0x01,0x00,0x04,0x03,0x02,0x01}'
  - id: config_set_end
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0xFE,0x00,0x04,0x03,0x02,0x01}'
  - id: resolution_read
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x11,0x00,0x04,0x03,0x02,0x01}'
  - id: base_para_read
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x12,0x00,0x04,0x03,0x02,0x01}'
  - id: movement_sensitivity_read
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x13,0x00,0x04,0x03,0x02,0x01}'
  - id: static_sensitivity_read
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x14,0x00,0x04,0x03,0x02,0x01}'
  - id: cal_state_read
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x1B,0x00,0x04,0x03,0x02,0x01}'
  - id: radar_reset
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0xA2,0x00,0x04,0x03,0x02,0x01}'  
  - id: radar_restart
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0xA3,0x00,0x04,0x03,0x02,0x01}'  
  - id: radar_calibration
    type: std::array<uint8_t, 12>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x02,0x00,0x0B,0x00,0x04,0x03,0x02,0x01}'
  - id: resolution_set
    type: std::array<uint8_t, 18>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x08,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x03,0x02,0x01}'
  - id: base_para_set
    type: std::array<uint8_t, 17>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x07,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x03,0x02,0x01}'
  - id: movement_sensitivity_set
    type: std::array<uint8_t, 26>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x10,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x03,0x02,0x01}'
  - id: static_sensitivity_set
    type: std::array<uint8_t, 26>
    initial_value: '{0xFD,0xFC,0xFB,0xFA,0x10,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x03,0x02,0x01}'
uart:
  id: ${device_name}_uart
  rx_pin: 5
  tx_pin: 4
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  debug:
    direction: RX
    dummy_receiver: true
    after:
      #delimiter: [0x04,0x03,0x02,0x01]
      timeout: 25ms
    sequence:
      - lambda: |-
          std::string result = "";
          //UARTDebug::log_hex(direction, bytes, ',');
          uint8_t len=bytes.size();
          if(direction==UART_DIRECTION_RX ){
            if(bytes[len-1]==0x01 && bytes[len-2]==0x02 && bytes[len-3]==0x03 && bytes[len-4]==0x04){
              switch (bytes[6]) {
                case 0x11:  //读取分辨率
                  switch (bytes[10]) {
                    case 0x00:  
                      id(${device_name}_setResolution).publish_state("75cm");
                      break;
                    case 0x01:
                      id(${device_name}_setResolution).publish_state("50cm");
                      break;
                    case 0x03:
                      id(${device_name}_setResolution).publish_state("20cm");
                      break;
                  }
                  break;
                case 0x12:  //读取基本配置参数
                  uint16_t nobody_times;
                  nobody_times=((uint16_t)bytes[13])<<8 | bytes[12];
                  id(${device_name}_nobody_duration).publish_state(nobody_times);
                  id(base_para_set)[8]=bytes[10];
                  id(base_para_set)[9]=bytes[11];
                  id(base_para_set)[10]=bytes[12];
                  id(base_para_set)[11]=bytes[13];
                  id(${device_name}_min_distance).publish_state(bytes[10]);
                  id(${device_name}_max_distance).publish_state(bytes[11]);
                  break;
                case 0x13:   //读取运动灵敏度
                  result = "";
                  char buf[5];
                  for (size_t i = 10; i < 24; i++) {
                    if (i > 10) {
                      result += ',';
                    }
                    sprintf(buf, "%02X", bytes[i]);
                    result += buf;
                    id(movement_sensitivity_set)[i-2]=bytes[i];
                  }
                  id(${device_name}_movement_sensitivity).publish_state(result);
                  break;
                case 0x14:  //读取静止灵敏度
                  result = "";
                  for (size_t i = 10; i < 24; i++) {
                    if (i > 10) {
                      result += ',';
                    }
                    sprintf(buf, "%02X", bytes[i]);
                    result += buf;
                    id(static_sensitivity_set)[i-2]=bytes[i];
                  }
                  id(${device_name}_static_sensitivity).publish_state(result);
                  break;
                case 0x1B:        //读取校准状态
                  result = "";
                  if(bytes[10]==1)
                    result="Calibrating";  
                  else{
                    if(bytes[8]==0)
                      result="Calibration Success";  
                    else
                      result="Calibration Failed"; 
                  }
                  id(${device_name}_cal_status).publish_state(result);  
                  break;
              }
            }else{
              result = "";
              double dist=0.0;
              switch (bytes[8]){
                case 0x00:
                  result="No Target";
                  break;
                case 0x01:
                  result="Moveing Target";
                  dist=(((uint16_t)bytes[10])<<8 | bytes[9])*0.01;
                  id(${device_name}_movement_target_distance).publish_state(dist);
                  break;
                case 0x02:
                  result="Static Target";
                  dist=(((uint16_t)bytes[13])<<8 | bytes[12])*0.01;
                  id(${device_name}_static_target_distance).publish_state(dist);
                  break;
                case 0x03:
                  result="Moveing&Static Target";
                  dist=(((uint16_t)bytes[10])<<8 | bytes[9])*0.01;
                  id(${device_name}_movement_target_distance).publish_state(dist);
                  dist=(((uint16_t)bytes[13])<<8 | bytes[12])*0.01;
                  id(${device_name}_static_target_distance).publish_state(dist);
                  break;
                case 0x04:
                  result="Noise Detecting";
                  break;
                case 0x05:
                  result="Noise Detection Success";
                  break;
                case 0x06:
                  result="Noise Detection Failed";
                  break;
              }
              id(${device_name}_target_status).publish_state(result);  
            }
          }

switch:
  - platform: gpio
    name: "Switch"
    id: ${device_name}_switch
    pin: 7
    restore_mode: ALWAYS_OFF    
  - platform: gpio
    name: ${device_name}_led
    id: ${device_name}_led
    pin: 6
    inverted: True
  - platform: template
    name: "Auto Switch AC"
    id: ${device_name}_auto_switch_ac
    device_class: switch
    optimistic: True
    assumed_state: True
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: gpio
    pin: 10
    id: ${device_name}_presence
    name: "Presence"
    device_class: presence
    filters:
      - delayed_off: 100ms
      - delayed_on: 100ms
    on_press:
      then:
        lambda: |-
          if(id(${device_name}_auto_switch_ac).state){
            if(id(${device_name}_illumination).state<=id(${device_name}_illumination_Threshold).state){
              id(${device_name}_switch).turn_on();
            }
          }
    on_release:
      then:
        lambda: |-
          if(id(${device_name}_auto_switch_ac).state){
            id(${device_name}_switch).turn_off();  
          }

select:
  - platform: template
    id: ${device_name}_setResolution
    name: "Resolution"
    update_interval: never
    options: 
      - "20cm"
      - "50cm"
      - "75cm"
    set_action:
      - lambda: |-
          if(x=="20cm"){
            id(resolution_set)[8]=0x03;
          }else if(x=="50cm") {
            id(resolution_set)[8]=0x01;
          }else if(x=="75cm"){
            id(resolution_set)[8]=0x00;
          }
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(resolution_set).data(),sizeof(id(resolution_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(resolution_read).data(),sizeof(id(resolution_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"   

number:
  - platform: template
    id: ${device_name}_min_distance
    name: "Min Distance"
    update_interval: never
    min_value: 1
    max_value: 14
    step: 1
    set_action:
      - lambda: |-
          id(base_para_set)[8]=(uint8_t)x;
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_set).data(),sizeof(id(base_para_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_read).data(),sizeof(id(base_para_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));" 
  - platform: template
    id: ${device_name}_max_distance
    name: "Max Distance"
    update_interval: never
    min_value: 1
    max_value: 14
    step: 1
    set_action:
      - lambda: |-
          id(base_para_set)[9]=(uint8_t)x;
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_set).data(),sizeof(id(base_para_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_read).data(),sizeof(id(base_para_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"      
  - platform: template
    id: ${device_name}_nobody_duration
    name: "Nobody Duration(s)"
    update_interval: never
    min_value: 5
    max_value: 600
    step: 1
    set_action:
      - lambda: |-  
          id(base_para_set)[10]=(uint8_t)((uint16_t)x & 0xFF);
          id(base_para_set)[11]=(uint8_t)(((uint16_t)x>>8) & 0xFF);
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_set).data(),sizeof(id(base_para_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(base_para_read).data(),sizeof(id(base_para_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"  
  - platform: template
    name: "Illumination Threshold"
    id: ${device_name}_illumination_Threshold
    optimistic: true
    min_value: 0
    max_value: 1
    step: 0.01 
    restore_value: True


text:
  - platform: template
    mode: text
    name: "Movement Sensitivity"
    id: ${device_name}_movement_sensitivity
    update_interval: never
    set_action: 
      - lambda: |-
          std::vector<uint8_t> bytes;
          size_t start = 0;
          size_t end = x.find(',');
          while (end != std::string::npos) {
            std::string item = x.substr(start, end - start);
            bytes.push_back((uint8_t)std::stoi(item, nullptr, 16));  // 将十六进制字符串转换为字节并存入向量
            start = end + 1;
            end = x.find(',', start);
          }
          if (start < x.size()) {
            std::string item = x.substr(start);
            bytes.push_back((uint8_t)std::stoi(item, nullptr, 16));
          }
          for(size_t i=0;i<bytes.size();++i){
            id(movement_sensitivity_set)[i+8]=bytes[i];
          }
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(movement_sensitivity_set).data(),sizeof(id(movement_sensitivity_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(movement_sensitivity_read).data(),sizeof(id(movement_sensitivity_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));"  
  - platform: template
    mode: text
    name: "Static Sensitivity"
    id: ${device_name}_static_sensitivity
    set_action: 
      - lambda: |-
          std::vector<uint8_t> bytes;
          size_t start = 0;
          size_t end = x.find(',');
          while (end != std::string::npos) {
            std::string item = x.substr(start, end - start);
            bytes.push_back((uint8_t)std::stoi(item, nullptr, 16));  // 将十六进制字符串转换为字节并存入向量
            start = end + 1;
            end = x.find(',', start);
          }
          if (start < x.size()) {
            std::string item = x.substr(start);
            bytes.push_back((uint8_t)std::stoi(item, nullptr, 16));
          }
          for(size_t i=0;i<bytes.size();++i){
            id(static_sensitivity_set)[i+8]=bytes[i];
          }
          id(${device_name}_uart)->write_array(id(config_set_begin).data(),sizeof(id(config_set_begin)));
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(static_sensitivity_set).data(),sizeof(id(static_sensitivity_set)));"
      - delay: 0.2s 
      - lambda: "id(${device_name}_uart)->write_array(id(static_sensitivity_read).data(),sizeof(id(static_sensitivity_read)));"  
      - delay: 0.1s
      - lambda: "id(${device_name}_uart)->write_array(id(config_set_end).data(),sizeof(id(config_set_end)));" 

sensor:
  - platform: template
    name: "Static Target Distance"
    id: ${device_name}_static_target_distance
    device_class: distance
    update_interval: never
    unit_of_measurement: "m"
  - platform: template
    name: "Movement Target Distance"
    id: ${device_name}_movement_target_distance
    device_class: distance
    update_interval: never
    unit_of_measurement: "m"
  - platform: adc
    pin: GPIO0
    name: "Illumination"
    id: ${device_name}_illumination
    update_interval: 5s